11-1.Ensuring Quality Query Results
Problem-1:
Create a list of all tables whose first two characters in the name of the table is JO. The tables must be owned by the current Oracle User.
SQL Query:
SELECT table_name
FROM user_tables
WHERE table_name LIKE 'JO%'
ORDER BY table_name;


Problem-2:
Create a list that includes the first initial of every employee's first name, a space, and the last name of the employee.
SQL Query:
SELECT SUBSTR(first_name, 1, 1) || ' ' || last_name AS employee_name
FROM employees;


Problem-3:
Create a list of every employee's first name concatenated to a space and the employee's last name, and the email of all employees where the email address contains the string 'IN'.
SQL Query:
SELECT first_name || ' ' || last_name AS “Employee_Name”, email AS “Email”
FROM employees
WHERE email LIKE '%IN%'
ORDER BY email;


Problem-4:
Create a list of 'smallest' last name and the 'highest' last name from the employees table.
SQL Query:
SELECT MIN(last_name) AS “First_last_name”,
MAX(last_name) AS “last_last_name”
FROM employees;


Problem-5:
Create a list of weekly salaries from the employees table where the weekly salary is between 700 and 3000 − The salaries should be formatted to include a $- sign and have two decimal points like: $9999.99 • Tables Used: − Employees.
SQL Query:
SELECT ‘$’|| ROUND((salary*12)/52,2) AS”Weekly Salary”
FROM employees
WHERE (salary*12)/52 BETWEEN 700 AND 3000;


Problem-6:
 Create a list of every employee and his related job title sorted by job_title • Tables Used: − Employees, Jobs
SQL Query:
SELECT SUBSTR(first_name,1,1)|| ‘ ‘
|| last_name AS “Employee Name”,
Job_title AS “Job”
FROM employees e,jobs j
WHEREe.job_id=j.job_id
ORDER BY job_title;



Problem-7:
Create a list of every employee’s job, the salary ranges within the job, and the employee's salary −List the lowest and highest salary range within each job with a dash to separate the salaries like this: 100 – 200 • Tables Used: −Employees, Jobs.
SQL Query:
SELECT  SUBSTR(first_name,1,1)|| ‘ ‘ ||last_name AS “Employee Name”,job_title AS”Job”,min_salary || ‘-‘ ||max_salary AS “Salary Range”,salary AS “Employee’s Salary”
FROM employeese,jobs j
WHERE e.job_id=j.job_id
ORDER BY  job_title;


Problem-8:
Using an ANSII join method, create a list of every employee's first initial and last name, and department name − Make sure the tables are joined on all of the foreign keys declared between the two tables • Tables Used: − Employees, Departments.
SQL Query:
SELECT SUBSTR(first_name,1,1)|| ‘ ‘ || last_name AS “Employee Name”, department_name AS “Department Name”
FROM  employees e NATURAL JOIN
departments;


Problem-9:
Change the previous listing to join only on the department_id column • Tables Used: − Employees, Departments.
SQL Query:
SELECT SUBSTR(first_name, 1, 1) || ‘ ‘ || last_name AS “Employee Name”,
department_name AS “Department Name”
FROM employees JOIN departments
USING (department_id);

Problem-10:
Create a list of every employee's last name, and the word nobody or somebody depending on whether or not the employee has a manager − Use the Oracle DECODE function to create the list • Tables Used: − Employees.
SQL Query:
SELECT DECODE(manager_id, NULL, 'Nobody', 'Somebody') AS “Works for”,last_name AS “Last Name”
FROM  employees;


Problem-11:
Create a list of every employee's first initial and last name, salary, and a yes or no to show whether or not an employee makes a commission − Fix this query to produce the result .
SQL Query:
SELECT SUBSTR(first_name,1 1)||' '|last_name, "Employee Name", salary "Salary", 
DEC(commission_pct NULL, 'No', 'Yes')'Commission'
 FROM employees;

Problem-12:
Create a list of every employee's last name, department name, city, and state_province − Include departments without employees − An outer join is required • Tables Used: − Employees, Departments, Locations.
SQL Query:
SELECT 
e.last_name, 
d.department_name, 
l.city, 
l.state_province
FROM 
  employees e
  RIGHT OUTER JOIN departments d ON e.department_id = d.department_id
  JOIN locations l ON d.location_id = l.location_id;

Problem-13:
Create a list of every employee's first and last names, and the first occurrence of: commission_pct, manager_id, or -1 −If an employee gets commission, display the commission_pct column; if no commission, then display his manager_id; if he has neither commission nor manager, then the number -1 • Tables Used: −Employees.

SQL Query:
SELECT 
first_name, 
last_name, 
COALESCE(commission_pct, manager_id, -1) AS commission_or_manager
FROM 
  employees;


Problem-14:
Create a list of every employee's last name, salary, and job_grade for all employees working in departments with a department_id greater than 50 • Tables Used: − Employees, job_grades
SQL Query:
SELECT 
e.last_name, 
e.salary, 
jg.grade_level AS job_grade
FROM 
  employees e
  JOIN job_gradesjg ON e.salary BETWEEN jg.lowest_sal AND jg.highest_sal
WHERE
e.department_id> 50;



Problem-15:
Produce a list of every employee's last name and department name − Include both employees without departments, and departments without employees • Tables Used: − Employees, Departments.
SQL Query:
SELECT 
e.last_name, 
d.department_name
FROM 
  employees e
  LEFT JOIN departments d ON e.department_id = d.department_id
UNION ALL
SELECT 
  NULL, 
d.department_name
FROM 
  departments d
  LEFT JOIN employees e ON d.department_id = e.department_id
WHERE
e.employee_id IS NULL
ORDER BY 
department_name, 
last_name;


Problem-16:
Create a treewalking list of every employee's last name, his manager’s last name, and his position in the company −The top level manager has position 1, this manager's subordinates position 2, their subordinates position 3, and so on −Start the listing with employee number 100 • Tables Used: −Employees.

SQL Query:
WITH RECURSIVE employee_hierarchy AS (
  SELECTemployee_id,  last_name, manager_id,1 AS position
  FROM employees
  WHERE employee_id = 100
  UNION ALL
  SELECT e.employee_id,  e.last_name, e.manager_id,  eh.position + 1
  FROM employees e
  JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id
)
SELECT e.last_name, m.last_name AS manager_last_name, e.position
FROM employee_hierarchy e
  LEFT JOIN employees m ON e.manager_id = m.employee_id
ORDER BY e.position,  e.last_name;


Problem-17:
 Produce a list of the earliest hire date, the latest hire date, and the number of employees from the employees table
SQL Query:
SELECT MIN(hire_date) AS earliest_hire_date,MAX(hire_date) AS latest_hire_date, COUNT(*) AS number_of_employees
FROM employees;


Problem-18:
Create a list of department names and the departmental costs (salaries added up) − Include only departments whose salary costs are between 15000 and 31000, and sort the listing by the cost.
SQL Query:
SELECT d.department_name,SUM(e.salary) AS departmental_cost
FROM employees e
  JOIN departments d ON e.department_id = d.department_id
GROUP BY d.department_name
HAVING 
  SUM(e.salary) BETWEEN 15000 AND 31000
ORDER BY departmental_cost;


Problem-19:
Create a list of department names, the manager id, manager name (employee last name) of that department, and the average salary in each department.
SQL Query:
SELECT d.department_name,d.manager_id,m.last_name AS manager_name,AVG(e.salary) AS average_salary
FROM departments d
  JOIN employees e ON d.department_id = e.department_id
  LEFT JOIN employees m ON d.manager_id = m.employee_id
GROUP BY d.department_name, d.manager_id, m.last_name
ORDER BY d.department_name;


Problem-20:
Show the highest average salary for the departments in the employees table − Round the result to the nearest whole number.
SQL Query:
SELECT CEIL(AVG(salary)) AS highest_average_salary
FROM 
  (
  SELECT AVG(e.salary) AS avg_salary
  FROM employees e
  GROUP BY e.department_id
  ) AS department_salaries;


Problem-21:
Create a list of department names and their monthly costs (salaries added up).
SQL Query:
SELECT d.department_name,SUM(e.salary) / 12 AS monthly_cost
FROM employees e
  JOIN departments d ON e.department_id = d.department_id
GROUP BY d.department_name
ORDER BY monthly_cost DESC;


Problem-22:
Create a list of department names, and job_ids − Calculate the monthly salary cost for each job_id within a department, for each department, and for all departments added together.
SQL Query:
WITH department_job_costs AS (
  SELECT d.department_name,e.job_id,SUM(e.salary) / 12 AS monthly_cost
  FROMemployees e
    JOIN departments d ON e.department_id = d.department_id
  GROUP BY d.department_name, e.job_id
),
department_costs AS (
  SELECT department_name,SUM(monthly_cost) AS total_monthly_cost
  FROM department_job_costs
  GROUP BY department_name
)
SELECT 'All Departments' AS department_name, SUM(monthly_cost) AS total_monthly_cost
FROM department_job_costs
UNION ALL
SELECT djc.department_name,djc.monthly_cost
FROM department_job_costs djc
UNION ALL
SELECT dc.department_name,dc.total_monthly_cost
FROM department_costs dc
ORDER BY department_name;


Problem-23:
Expand the previous list to also show if the department_id or job_id was used to create the subtotals shown in the output (Hint: Cube, Grouping).
SQL Query:
SELECT department_name,job_id, SUM(salary) / 12 AS monthly_cost,
GROUPING(department_name) AS department_grouping,
GROUPING(job_id) AS job_grouping
FROM employees e
  JOIN departments d ON e.department_id = d.department_id
GROUP BY  CUBE (d.department_name, e.job_id)
ORDER BY  department_name, job_id;


Problem-24:
− Create a list that includes the monthly salary costs for each job title within a department − In the same list, display the monthly salary cost per city. (Hint: Grouping Sets).
SQL Query:
SELECT department_name,job_title, city,
SUM(salary) / 12 AS monthly_cost,
  GROUPING_ID(department_name, job_title, city) AS grouping_id,
GROUPING(department_name) AS department_grouping,
GROUPING(job_title) AS job_title_grouping,
GROUPING(city) AS city_grouping
FROM employees e
  JOIN departments d ON e.department_id = d.department_id
  JOIN locations l ON d.location_id = l.location_id
GROUP BY GROUPING SETS ( (d.department_name, e.job_title),(l.city),
    ()
  )
ORDER BY department_name, job_title, city;


Problem-25:
Create a list of employee names as shown and department ids −In the same report, list the department ids and department names. And finally, list the cities −The rows should not be joined, just listed in the same report. (Hint: Union).
SQL Query:
SELECT 'Employee' AS type,employee_name, department_id,
  NULL AS department_name,NULL AS city
FROM employees
UNION ALL
SELECT 'Department' AS type, NULL AS employee_name, department_id,department_name, NULL AS city
FROM departments
UNION ALL
SELECT   'City' AS type,NULL AS employee_name, NULL AS department_id,NULL AS department_name,city
FROM locations
ORDER BY type;


Problem-26:
Create a list of each employee's first initial and last name, salary, and department name for each employee earning more than the average for his department.
SQL Query:
WITH department_averages AS (
  SELECT department_id, AVG(salary) AS avg_salary
  FROM employees
  GROUP BY department_id
)
SELECT CONCAT(SUBSTR(e.first_name, 1, 1), '. ', e.last_name) AS employee_name,e.salary,d.department_name
FROM employees e
  JOIN departments d ON e.department_id = d.department_id
  JOIN department_averages da ON e.department_id = da.department_id
WHERE e.salary>da.avg_salary
ORDER BY d.department_name, e.salary DESC;


DONE BY 
NAME :B.HEVANTHKUMAR
REG NO:192373032

